// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bcfoverparRcppClean
List bcfoverparRcppClean(NumericVector y_, NumericVector z_, NumericVector x_con_, NumericVector x_mod_, NumericVector x_mod_est_, List x_con_info_list, List x_mod_info_list, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, double con_sd, double mod_sd, double con_alpha, double con_beta, double mod_alpha, double mod_beta, CharacterVector treef_name_, int status_interval, bool RJ, bool prior_sample, double trt_init);
RcppExport SEXP _bcf_bcfoverparRcppClean(SEXP y_SEXP, SEXP z_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_mod_est_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP treef_name_SEXP, SEXP status_intervalSEXP, SEXP RJSEXP, SEXP prior_sampleSEXP, SEXP trt_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_est_(x_mod_est_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_name_(treef_name_SEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type RJ(RJSEXP);
    Rcpp::traits::input_parameter< bool >::type prior_sample(prior_sampleSEXP);
    Rcpp::traits::input_parameter< double >::type trt_init(trt_initSEXP);
    rcpp_result_gen = Rcpp::wrap(bcfoverparRcppClean(y_, z_, x_con_, x_mod_, x_mod_est_, x_con_info_list, x_mod_info_list, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, con_sd, mod_sd, con_alpha, con_beta, mod_alpha, mod_beta, treef_name_, status_interval, RJ, prior_sample, trt_init));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bcf_bcfoverparRcppClean", (DL_FUNC) &_bcf_bcfoverparRcppClean, 25},
    {NULL, NULL, 0}
};

RcppExport void R_init_bcf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
